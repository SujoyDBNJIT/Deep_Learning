# -*- coding: utf-8 -*-
"""udemy _modeltrain.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13piLz4pJRDkYzpcKFHWPpAkiXqFSzRs9
"""

import torch
import numpy as np
import matplotlib.pyplot as plt
import torch.nn as nn
from sklearn import datasets

n_pts = 100
centers = [[-0.5,0.5],[0.5,-0.5]]
x,y = datasets.make_blobs(n_samples=n_pts, centers=centers, random_state=123, cluster_std=0.5)
x_data = torch.tensor(x).float()
y_data = torch.tensor(y.reshape(100, 1)).float()

def scatter_plot():
  plt.scatter(x[y==0, 0], x[y==0, 1])
  plt.scatter(x[y==1, 0], x[y==1, 1])

class Model(nn.Module):
  def __init__(self, input_size, output_size):
    super().__init__()
    self.linear = nn.Linear(input_size, output_size)
  def forward(self, x):
    pred = torch.sigmoid(self.linear(x))
    return pred

torch.manual_seed(2)
model = Model(2,1)
print(list(model.parameters()))

[w,b] = model.parameters()
[w1, w2]= w.view(2)
b1 = b[0]
def get_params():
  return (w1.item(), w2.item(), b1.item())

def plot_fit(title):
  plt.title = title
  w1, w2, b1 = get_params()
  x1 = np.array([-2.0, 2.0])
  x2 = (w1*x1 +b1)/ -w2
  plt.plot(x1, x2)
  scatter_plot()

plot_fit('initial graph')

criterion = nn.BCELoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)

epochs = 5000
losses = []
for i in range(epochs):
  y_pred = model.forward(x_data)
  loss = criterion(y_pred, y_data)
  print("epoch:", i, "loss", loss.item())
  losses.append(loss)
  optimizer.zero_grad()
  loss.backward()
  optimizer.step()
  print (w1,w2,b1)

plt.plot(range(epochs), losses)
plt.xlabel('epoch')
plt.ylabel('loss')

plot_fit('trained_model')

point1 = torch.tensor([-1.0, 1.0])
point2 = torch.tensor([1.0, -1.0])
plt.plot(point1.numpy()[0], point1.numpy()[1], 'ro')
plt.plot(point2.numpy()[0], point2.numpy()[1], 'ko')
print(model.forward(point1).item())
print(model.forward(point2).item())
plot_fit('trained_model')

